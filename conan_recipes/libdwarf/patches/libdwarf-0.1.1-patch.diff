diff --git a/CMakeLists.txt b/CMakeLists.txt
index 793b917e..2e843dca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,9 @@
 cmake_minimum_required(VERSION 3.3)
-
 project(libdwarf C CXX)
 
+include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
+conan_basic_setup(TARGETS)
+
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
 include_directories( ${CMAKE_BINARY_DIR} )
 
@@ -16,43 +18,43 @@ endmacro()
 
 set(LIBDWARF_CRT "MD" CACHE STRING "Either MT or MD, specifies whether to use the static or dynamic MSVCRT.")
 
-if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-  # Use CMAKE_MSVC_RUNTIME in versions 3.15 and up
-  if (CMAKE_VERSION VERSION_GREATER_EQUAL "3.15")
-    cmake_policy(SET CMP0091 NEW)
-    if (LIBDWARF_CRT STREQUAL "MT")
-      message(STATUS "Using MT runtime by CMAKE_MSVC_RUNTIME_LIBRARY")
-      set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
-    elseif(LIBDWARF_CRT STREQUAL "MD")
-    message(STATUS "Using MD runtime by CMAKE_MSVC_RUNTIME_LIBRARY")
-      set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
-    else()
-      message(FATAL_ERROR "LIBDWARF_CRT must be MT or MD")
-    endif()
-  # Use regexes in versions before 3.15
-  else()
-    if (LIBDWARF_CRT STREQUAL "MT")
-      message(STATUS "Using MT runtime by compile flag replacement")
-      # taken from the CMake FAQ
-      foreach(flag_v 
-      CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG
-      CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL
-      CMAKE_C_FLAGS_RELWITHDEBINFO
-      CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG
-      CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL
-      CMAKE_CXX_FLAGS_RELWITHDEBINFO)
-        if (${flag_v} MATCHES "([\\/\\-]M)D")
-          string(REGEX REPLACE "([\\/\\-]M)D" "\\1T"
-          ${flag_v} "${${flag_v}}")
-        endif()
-      endforeach()
-    elseif(LIBDWARF_CRT STREQUAL "MD")
-      message(STATUS "Using MD runtime by cmake default")
-    else()
-      message(FATAL_ERROR "LIBDWARF_CRT must be MT or MD")
-    endif()
-  endif()
-endif()
+# if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+#   # Use CMAKE_MSVC_RUNTIME in versions 3.15 and up
+#   if (CMAKE_VERSION VERSION_GREATER_EQUAL "3.15")
+#     cmake_policy(SET CMP0091 NEW)
+#     if (LIBDWARF_CRT STREQUAL "MT")
+#       message(STATUS "Using MT runtime by CMAKE_MSVC_RUNTIME_LIBRARY")
+#       set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+#     elseif(LIBDWARF_CRT STREQUAL "MD")
+#     message(STATUS "Using MD runtime by CMAKE_MSVC_RUNTIME_LIBRARY")
+#       set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+#     else()
+#       message(FATAL_ERROR "LIBDWARF_CRT must be MT or MD")
+#     endif()
+#   # Use regexes in versions before 3.15
+#   else()
+#     if (LIBDWARF_CRT STREQUAL "MT")
+#       message(STATUS "Using MT runtime by compile flag replacement")
+#       # taken from the CMake FAQ
+#       foreach(flag_v 
+#       CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG
+#       CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL
+#       CMAKE_C_FLAGS_RELWITHDEBINFO
+#       CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG
+#       CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL
+#       CMAKE_CXX_FLAGS_RELWITHDEBINFO)
+#         if (${flag_v} MATCHES "([\\/\\-]M)D")
+#           string(REGEX REPLACE "([\\/\\-]M)D" "\\1T"
+#           ${flag_v} "${${flag_v}}")
+#         endif()
+#       endforeach()
+#     elseif(LIBDWARF_CRT STREQUAL "MD")
+#       message(STATUS "Using MD runtime by cmake default")
+#     else()
+#       message(FATAL_ERROR "LIBDWARF_CRT must be MT or MD")
+#     endif()
+#   endif()
+# endif()
 
 # message("CMake flags are:")
 # message("  CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
@@ -305,41 +307,6 @@ check_c_source_compiles([=[
       return 0;
   } ]=]  HAVE_REGEX)
 
-set(CMAKE_REQUIRED_LIBRARIES z)
-check_c_source_compiles( [=[
-  #include "zlib.h"
-  int main()
-  {
-      Bytef dest[100];
-      uLongf destlen = 100;
-      Bytef *src = 0;
-      uLong srclen = 3;
-      int res = uncompress(dest,&destlen,src,srclen);
-      if (res == Z_OK) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZLIB )
-check_c_source_compiles( [=[
-  #include "zlib.h"
-  int main()
-  {
-      Bytef dest[100];
-      uLongf destlen = 100;
-      Bytef *src = 0;
-      uLong srclen = 3;
-      int res = uncompress(dest,&destlen,src,srclen);
-      if (res == Z_OK) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZLIB_H )
-set(CMAKE_REQUIRED_LIBRARIES)
-if (HAVE_ZLIB) 
-  # For linking in libz
-  set(DW_FZLIB "z")
-endif()
-
 check_c_source_compiles([=[
 #include <stdint.h>
 int main()
diff --git a/cmake/config.h.cmake b/cmake/config.h.cmake
index 2e4d7e97..ed738509 100644
--- a/cmake/config.h.cmake
+++ b/cmake/config.h.cmake
@@ -126,11 +126,8 @@
 /* Set to 1 if __attribute__ ((unused)) is available. */
 #cmakedefine HAVE_UNUSED_ATTRIBUTE 1
 
-/* Set to 1 if zlib decompression is available. */
-#cmakedefine HAVE_ZLIB 1
-
-/* Define to 1 if you have the <zlib.h> header file. */
-#cmakedefine HAVE_ZLIB_H 1
+#undef HAVE_ZLIB
+#undef HAVE_ZLIB_H
 
 /* Define to the sub-directory where libtool stores uninstalled libraries. */
 #cmakedefine LT_OBJDIR 1
@@ -185,4 +182,3 @@
 
 /* Define to `unsigned int' if <sys/types.h> does not define. */
 #undef size_t
-
