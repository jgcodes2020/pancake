from argparse import ArgumentParser, ArgumentTypeError, ArgumentError
import os
from pathlib import Path
import re
import tempfile
from textwrap import dedent
import platform
import subprocess as subp
import shlex
from tempfile import NamedTemporaryFile, TemporaryFile


def path_file(arg: str):
    result = Path(arg).resolve()
    if result.is_file():
        return result
    else:
        raise ArgumentTypeError(f"path_file:{arg} is not a file")


def path_file_new(arg: str):
    result = Path.cwd().joinpath(Path(arg)).resolve()
    if (result.is_dir()):
        raise ArgumentTypeError(f"{arg} is an directory, can't write file")
    else:
        return result


parser = ArgumentParser(
    description="Generates a C++ header and source file for a Pancake resource."
)
parser.add_argument("input",
                    help="Input resource file to be packaged into C++",
                    type=path_file
                    )

parser.add_argument("-H", "--out-header",
                    help="Output header to include from C++ files",
                    dest="header", type=path_file_new,
                    required=True
                    )

parser.add_argument("-O", "--out-object",
                    help="Output object to link with libraries",
                    dest="object", type=path_file_new,
                    required=True
                    )

args = parser.parse_args()
del parser

# Assembly generation

asm: str = {
    "Linux": dedent("""\
    .section .rodata
    # Metadata definition
    .global _pancake_rsrc_{name}_begin
    .type _pancake_rsrc_{name}_begin, @object
    .global _pancake_rsrc_{name}_end
    .type _pancake_rsrc_{name}_end, @object
    
    _pancake_rsrc_{name}_begin:
    # .incbin the file
    .incbin "{fname}"
    _pancake_rsrc_{name}_end:
    """),
    "Windows": dedent("""\
    section .rdata
    ; Metadata definition
    global _pancake_rsrc_{name}_begin
    global _pancake_rsrc_{name}_end
    
    _pancake_rsrc_{name}_begin:
    ; incbin the file
    incbin "{fname}"
    _pancake_rsrc_{name}_end:
    """)
}[platform.system()]
asm_suffix = {
    "Linux": ".s",
    "Windows": ".asm"
}[platform.system()]
assembler = {
    "Linux": "as \"{input}\" -o \"{output}\"",
    # MASM does not support INCBIN
    "Windows": "nasm \"{input}\" -o \"{output}\" -f win64"
}[platform.system()]

asm_nbase = re.sub(r"\W", "_", args.input.name)

asm = asm.format(fname=str(args.input),
                 name=asm_nbase)

asmfname = tempfile.mktemp()
asmfile = open(asmfname, "w+")
try:
    asmfile.write(asm)
    asmfile.flush()
    asm_cmd = assembler.format(
            input=asmfname, output=str(args.object))
    print(f"Assembling with: {asm_cmd}")
    subp.run(
        shlex.split(asm_cmd, posix=True)
    )
    pass
finally:
    asmfile.close()
    os.unlink(asmfname)

# Header generation

header = f"""\
/***********************
Automatically generated by rsrc_gen_asm.py.
Contains the assembler symbols used.
***********************/
#ifndef _PANCAKE_RSRC_{asm_nbase.upper()}_H_
#define _PANCAKE_RSRC_{asm_nbase.upper()}_H_

#include <stddef.h>

#ifdef __cplusplus
extern "C" {{
#endif

extern const char _pancake_rsrc_{asm_nbase}_begin[];
extern const char* _pancake_rsrc_{asm_nbase}_end;

const size_t _pancake_rsrc_{asm_nbase}_size = _pancake_rsrc_{asm_nbase}_end - _pancake_rsrc_{asm_nbase}_begin;

#ifdef __cplusplus
}}
#endif
#endif
"""
with open(args.header, "w") as f:
    f.write(header)
    f.flush()
